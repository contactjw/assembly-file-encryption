     1                                  ;Coded by John West on May 10, 2020
     2                                  ;This program will test out the functions library to show the user of number formatted output
     3                                  ;
     4                                  ;
     5                                  ;Include our external functions library functions
     6                                  %include "./functions64.inc"
     1                              <1> ;
     2                              <1> ;Include file for the functions library
     3                              <1> ;
     4                              <1> 
     5                              <1> %macro  PUSHREGS 0
     6                              <1>         push	rax
     7                              <1>         push	rbx
     8                              <1>         push	rcx
     9                              <1>         push	rdx
    10                              <1> 		push	rsi
    11                              <1> 		push	rdi
    12                              <1> 		push	r8
    13                              <1> 		push	r9
    14                              <1> 		push	r10
    15                              <1> 		push	r11
    16                              <1> 		push	r12
    17                              <1> 		push	r13
    18                              <1> 		push	r14
    19                              <1> 		push	r15
    20                              <1> %endmacro
    21                              <1> 
    22                              <1> %macro  POPREGS 0
    23                              <1> 		pop		r15
    24                              <1> 		pop		r14
    25                              <1> 		pop		r13
    26                              <1> 		pop		r12
    27                              <1> 		pop		r11
    28                              <1> 		pop		r10
    29                              <1> 		pop		r9
    30                              <1> 		pop		r8
    31                              <1>         pop		rdi
    32                              <1>         pop		rsi
    33                              <1>         pop		rdx
    34                              <1>         pop		rcx
    35                              <1> 		pop		rbx
    36                              <1> 		pop		rax
    37                              <1> %endmacro
    38                              <1> 
    39                              <1> ;Print all Quad Word values found in an array
    40                              <1> ;Stack Contents:	
    41                              <1> ;	Address of the Array (Stack)
    42                              <1> ;	Number of items in the array
    43                              <1> ;Example Usage:
    44                              <1> ;	push	ArrayToPrint
    45                              <1> ;	push	NumerOfEntriesInArray
    46                              <1> ;	call	PrintQWordArray
    47                              <1> extern		PrintQWordArray
    48                              <1> 
    49                              <1> ;Print all Quad Word values found in an array in Decimal Format
    50                              <1> ;Stack Contents:	
    51                              <1> ;	Address of the Array (Stack)
    52                              <1> ;	Number of items in the array
    53                              <1> ;Example Usage:
    54                              <1> ;	push	ArrayToPrint
    55                              <1> ;	push	NumerOfEntriesInArray
    56                              <1> ;	call	PrintQWordArrayDec
    57                              <1> extern		PrintQWordArrayDec
    58                              <1> 
    59                              <1> ;Print all Quad Word signed values found in an array in Decimal Format
    60                              <1> ;Stack Contents:	
    61                              <1> ;	Address of the Array (Stack)
    62                              <1> ;	Number of items in the array
    63                              <1> ;Example Usage:
    64                              <1> ;	push	ArrayToPrint
    65                              <1> ;	push	NumerOfEntriesInArray
    66                              <1> ;	call	PrintSQWordArrayDec
    67                              <1> extern		PrintSQWordArrayDec
    68                              <1> 
    69                              <1> ;Print all byte values found in an array in Hex format
    70                              <1> ;Arguments:	Address of the Array (Stack)
    71                              <1> ;			Number of items in the array
    72                              <1> extern		PrintByteArray
    73                              <1> 
    74                              <1> ;Print all byte values found in an array in Decimal format
    75                              <1> ;Arguments:	Address of the Array (Stack)
    76                              <1> ;			Number of items in the array
    77                              <1> extern		PrintByteArrayDec
    78                              <1> 
    79                              <1> ;Print all signed byte values found in an array in Decimal format
    80                              <1> ;Arguments:	Address of the Array (Stack)
    81                              <1> ;			Number of items in the array
    82                              <1> extern		PrintSByteArrayDec
    83                              <1> 
    84                              <1> ;Print all word values found in an array in Hex format
    85                              <1> ;Arguments:	Address of the Array (Stack)
    86                              <1> ;			Number of items in the array
    87                              <1> extern		PrintWordArray
    88                              <1> 
    89                              <1> ;Print all word values found in an array in Decimal format
    90                              <1> ;Arguments:	Address of the Array (Stack)
    91                              <1> ;			Number of items in the array
    92                              <1> extern		PrintWordArrayDec
    93                              <1> 
    94                              <1> ;Print all signed word values found in an array in Decimal format
    95                              <1> ;Arguments:	Address of the Array (Stack)
    96                              <1> ;			Number of items in the array
    97                              <1> extern		PrintSWordArrayDec
    98                              <1> 
    99                              <1> ;Print all Double Word values found in an array in Hex format
   100                              <1> ;Arguments:	Address of the Array (Stack)
   101                              <1> ;			Number of items in the array
   102                              <1> extern		PrintDWordArray
   103                              <1> 
   104                              <1> ;Print all Double Word values found in an array in Decimal format
   105                              <1> ;Arguments:	Address of the Array (Stack)
   106                              <1> ;			Number of items in the array
   107                              <1> extern		PrintDWordArrayDec
   108                              <1> 
   109                              <1> ;Print all signed Double Word values found in an array in Decimal format
   110                              <1> ;Arguments:	Address of the Array (Stack)
   111                              <1> ;			Number of items in the array
   112                              <1> extern		PrintSDWordArrayDec
   113                              <1> 
   114                              <1> ;Print a string with an ending 00h delimiter to the console
   115                              <1> ;Stack Contents:
   116                              <1> ;	Address of the String (Stack)
   117                              <1> ;Example Usage:
   118                              <1> ;	push	stringVariable
   119                              <1> ;	call	PrintString
   120                              <1> ;
   121                              <1> extern		PrintString
   122                              <1> 
   123                              <1> ;Get the length of a null-terminated string.  Can be used for functions
   124                              <1> ;which need a string length and don't search for null-terminated characters
   125                              <1> ;Stack Contents:
   126                              <1> ;	Address of the String (Stack)
   127                              <1> ;Return Value:
   128                              <1> ;	RAX will equal the length of the string
   129                              <1> ;Example Usage:
   130                              <1> ;	push	stringVariable
   131                              <1> ;	call	StringLength
   132                              <1> ;
   133                              <1> extern		StringLength
   134                              <1> 
   135                              <1> ;Print a space to the console
   136                              <1> ;Stack Contents:
   137                              <1> ;	None
   138                              <1> ;Example Usage:
   139                              <1> ;	call	PrintSpace
   140                              <1> ;
   141                              <1> extern		PrintSpace
   142                              <1> 
   143                              <1> ;Print 'x' number of spaces
   144                              <1> ;Stack Contents:
   145                              <1> ;	the total spaces to print
   146                              <1> ;Example Usage:
   147                              <1> ;	push	DWORD 5
   148                              <1> ;	call	PrintSpaces
   149                              <1> ;
   150                              <1> extern		PrintSpaces
   151                              <1> 
   152                              <1> ;Print a comma to the console
   153                              <1> ;Stack Contents:
   154                              <1> ;	None
   155                              <1> ;Example Usage:
   156                              <1> ;	call	PrintComma
   157                              <1> ;
   158                              <1> extern		PrintComma
   159                              <1> 
   160                              <1> ;Print a new line to the console
   161                              <1> ;Stack Contents:
   162                              <1> ;	None
   163                              <1> ;Example Usage:
   164                              <1> ;	call	Printendl
   165                              <1> ;
   166                              <1> extern		Printendl
   167                              <1> 
   168                              <1> ;Print a string which is not null terminated
   169                              <1> ;Stack contents:
   170                              <1> ;	The Address of the string to print
   171                              <1> ;	The length of the string to print
   172                              <1> ;Example Usage:
   173                              <1> ;	push	stringVariable
   174                              <1> ;	push	stringVariable.len
   175                              <1> ;	call	PrintText
   176                              <1> ;
   177                              <1> extern		PrintText
   178                              <1> 
   179                              <1> ;Convert and then print a 64bit hex number
   180                              <1> ;Stack contents:
   181                              <1> ;	Value to Convert to an Ascii String
   182                              <1> ;Example Usage:
   183                              <1> ;	push	QWORD [quadWordVariable]
   184                              <1> ;	call	Print64bitNumHex
   185                              <1> ;
   186                              <1> extern		Print64bitNumHex
   187                              <1>    
   188                              <1> ;Convert and then print a 64bit octal number
   189                              <1> ;Stack contents:
   190                              <1> ;	Value to Convert to an Ascii String
   191                              <1> ;Example Usage:
   192                              <1> ;	push	QWORD [quadWordVariable]
   193                              <1> ;	call	Print64bitNumOctal
   194                              <1> ;
   195                              <1> extern		Print64bitNumOctal
   196                              <1> 
   197                              <1> ;Convert and then print a 64bit decimal number
   198                              <1> ;Stack contents:
   199                              <1> ;	Value to Convert to an Ascii String
   200                              <1> ;Example Usage:
   201                              <1> ;	push QWORD [quadwordvariable]
   202                              <1> ;	call	Print64bitNumDecimal
   203                              <1> ;
   204                              <1> extern		Print64bitNumDecimal
   205                              <1> 
   206                              <1> ;Convert and then print a signed 64bit decimal number
   207                              <1> ;Stack contents:
   208                              <1> ;	Value to Convert to an Ascii String
   209                              <1> ;Example Usage:
   210                              <1> ;	push QWORD [quadwordvariable]
   211                              <1> ;	call	Print64bitNumDecimal
   212                              <1> ;
   213                              <1> extern		Print64bitSNumDecimal
   214                              <1> 
   215                              <1> ;Convert and then print a 64bit binary number
   216                              <1> ;Stack contents:
   217                              <1> ;	Value to Convert to an Ascii String
   218                              <1> ;Example Usage:
   219                              <1> ;	push QWORD [quadwordvariable]
   220                              <1> ;	call	Print64bitNumBinary
   221                              <1> ;
   222                              <1> extern		Print64bitNumBinary
   223                              <1> 
   224                              <1> ;Print a full 64bit binary number including leading zeros
   225                              <1> ;Stack contents:
   226                              <1> ;	Value to Convert to an Ascii String
   227                              <1> ;Example Usage:
   228                              <1> ;	push QWORD [quadwordvariable]
   229                              <1> ;	call	Print64bitFullBinary
   230                              <1> ;
   231                              <1> extern		Print64bitFullBinary
   232                              <1> 
   233                              <1> ;This routine prints a string to the screen left justified
   234                              <1> ;Stack contents:
   235                              <1> ;	Address of the string [ebp + 16]
   236                              <1> ;	Number of characters it will be justified within [ebp + 24]
   237                              <1> ;Example Usage:
   238                              <1> ;	push	stringVariable
   239                              <1> ;	push	QWORD 80
   240                              <1> ;	call	PrintLeft
   241                              <1> ;
   242                              <1> extern		PrintLeft
   243                              <1> 
   244                              <1> ;This routine prints a string to the screen right justified
   245                              <1> ;Stack contents:
   246                              <1> ;	Address of the string [ebp + 16]
   247                              <1> ;	Number of characters it will be justified within [ebp + 24]
   248                              <1> ;Example Usage:
   249                              <1> ;	push	stringVariable
   250                              <1> ;	push	QWORD 80
   251                              <1> ;	call	PrintRight
   252                              <1> ;
   253                              <1> extern		PrintRight
   254                              <1> 
   255                              <1> ;This routine prints a string to the screen center justified
   256                              <1> ;Stack contents:
   257                              <1> ;	Address of the string [ebp + 16]
   258                              <1> ;	Number of characters it will be justified within [ebp + 24]
   259                              <1> ;Example Usage:
   260                              <1> ;	push	stringVariable
   261                              <1> ;	push	QWORD 80
   262                              <1> ;	call	PrintCenter
   263                              <1> ;
   264                              <1> extern		PrintCenter
   265                              <1> 
   266                              <1> ;Print all 64bit Registers to the screen
   267                              <1> ;Stack contents:
   268                              <1> ;	None
   269                              <1> ;Example Usage:
   270                              <1> ;	call	PrintRegisters
   271                              <1> ;
   272                              <1> extern		PrintRegisters
   273                              <1> 
   274                              <1> ;Call the necessary interrupt with the necessary register values to read data from the keyboard
   275                              <1> ;Stack Contents:
   276                              <1> ;	Address of keyboard buffer
   277                              <1> ;	Size of the keyboard buffer
   278                              <1> ;Return:
   279                              <1> ;	Rax will contain the number of characters the user input
   280                              <1> ;Example Usage:
   281                              <1> ;	push	readbuffer
   282                              <1> ;	push	readbuffer.len
   283                              <1> ;	call	ReadText
   284                              <1> extern		ReadText
   285                              <1> 
   286                              <1> ;Input UnSigned Int 
   287                              <1> ;This function will let the user input an integer returned into the RAX register
   288                              <1> ;Arguments: None
   289                              <1> ;Return: 	rax will contain the usigned ingeter
   290                              <1> ;			Carry flag will be set if invalid integer was input
   291                              <1> ;Example Usage:
   292                              <1> ;	call	InputInt
   293                              <1> ;	Note: eax will contain the value of the unsigned integer entered
   294                              <1> ;	jnc		validIntegerInput
   295                              <1> ;	Otherwise, an invalid integer was input
   296                              <1> extern		InputUInt
   297                              <1> 
   298                              <1> ;Input Signed Int 
   299                              <1> ;This function will let the user input a signed integer and put the value 
   300                              <1> ;into the RAX register.
   301                              <1> ;Arguments: None
   302                              <1> ;Return: 	eax will contain the usigned ingeter
   303                              <1> ;			Carry flag will be set if invalid integer was input
   304                              <1> ;Example Usage:
   305                              <1> ;	call	InputSInt
   306                              <1> ;	Note: eax will contain the value of the signed integer entered
   307                              <1> ;	jnc		validIntegerInput
   308                              <1> ;	Otherwise, an invalid integer was input
   309                              <1> extern		InputSInt
   310                              <1> 
   311                              <1> ;Call the necessary interrupt with the necessary register values to read data from the keyboard
   312                              <1> ;Stack Contents:
   313                              <1> ;	Address of the string to print
   314                              <1> ;	Address of keyboard buffer
   315                              <1> ;	Size of the keyboard buffer
   316                              <1> ;Return:
   317                              <1> ;	Rax will contain the number of characters input
   318                              <1> ;Example Usage:
   319                              <1> ;	push	inputPromptVariable
   320                              <1> ;	push	keyboardBufferVariable
   321                              <1> ;	push	keyboardBufferVariable.len  ;This is the maximum size of the buffer
   322                              <1> ;	call	ReadTextWPrompt
   323                              <1> extern		ReadTextWPrompt
   324                              <1> 
   325                              <1> ;Print a Quad-word floating point number
   326                              <1> ;Stack Contents:
   327                              <1> ;	The number of fractional digits to print
   328                              <1> ;	The floating point number to print
   329                              <1> ;Return:
   330                              <1> ;	None
   331                              <1> ;Example Usage:
   332                              <1> ;	push	numberToPrint
   333                              <1> ;	push	[fractionalDigits]
   334                              <1> ;	call	PrintQWFloat
   335                              <1> extern		PrintQWFloat
   336                              <1> 
   337                              <1> ;Print a Double-word floating point number with scientific notation
   338                              <1> ;This version uses the integer extraction power of the FPU instead of moving bits
   339                              <1> ;	around to extract the exponent and left/right mantissa's making this a
   340                              <1> ;	much easier and shorter algorithm
   341                              <1> ;Stack Contents:
   342                              <1> ;	The number of fractional digits to print
   343                              <1> ;	The floating point number to print
   344                              <1> ;Return:
   345                              <1> ;	None
   346                              <1> ;Example Usage:
   347                              <1> ;	push	[numberToPrint]
   348                              <1> ;	push	[fractionalDigits]
   349                              <1> ;	call	PrintQWFloatSN
   350                              <1> extern		PrintQWFloatSN
   351                              <1> 
   352                              <1> ;Input a Floating Point Number	
   353                              <1> ;This function will let the user input a string, then it will check it to make sure it
   354                              <1> ;is a valid floating point number.  It will then convert the ASCII string into a QWORD 
   355                              <1> ;and return that value in the RAX register.
   356                              <1> ;Stack Contents:
   357                              <1> ;	None
   358                              <1> ;Return: 	RAX and ST(0) will contain the number
   359                              <1> ;			Carry flag will be set if invalid binary number was input
   360                              <1> ;Example Usage:
   361                              <1> ;	call	InputFloat
   362                              <1> ;	jnc		ValidFloatLabel
   363                              <1> ;	otherwise, a problem occured - print an error message
   364                              <1> extern		InputFloat
   365                              <1> 	
   366                              <1> ;Input Binary Number
   367                              <1> ;This function will let the user input a string, then it will check it to make sure it
   368                              <1> ;is a binary string.  It will then convert the ASCII string into a DWORD and return
   369                              <1> ;that value in the RAX register.
   370                              <1> ;Arguments: 
   371                              <1> ;	None
   372                              <1> ;Return: 	rax will contain the numeric binary value
   373                              <1> ;			Carry flag will be set if invalid binary number was input
   374                              <1> ;Example Usage:
   375                              <1> ;	call	InputBin
   376                              <1> ;	jnc		ValidBinLabel
   377                              <1> ;	otherwise, a problem occured - print an error message
   378                              <1> extern		InputBin
   379                              <1> 
   380                              <1> ;This function will let the user input a string, then it will check it to make sure it
   381                              <1> ;is a hexidecimal string.  It will then convert the ASCII string into a DWORD and return
   382                              <1> ;that value in the EAX register.
   383                              <1> ;Arguments: 
   384                              <1> ;	None
   385                              <1> ;Return: 	rax will contain the numeric hexidecimal value
   386                              <1> ;			Carry flag will be set if invalid hex number was input
   387                              <1> ;Example Usage:
   388                              <1> ;	call	InputHex
   389                              <1> ;	jnc		ValidHexLabel
   390                              <1> ;	otherwise, a problem occured - print an error message
   391                              <1> extern		InputHex
   392                              <1> 
   393                              <1> ;Allocate some memory (x bytes)	and return the high address to RAX
   394                              <1> ;Stack Contents:
   395                              <1> ;	Number of BYTES to add to memory
   396                              <1> ;Return: 	RAX will contain the new high memory address
   397                              <1> ;Example Usage:
   398                              <1> ;	push	QWORD 1024			;increase memory by 1024 bytes
   399                              <1> ;	call	AllocateBytes
   400                              <1> extern		AllocateBytes
   401                              <1> 
   402                              <1> ;Free some memory (x bytes)	and return the high address to RAX
   403                              <1> ;Stack Contents:
   404                              <1> ;	Number of BYTES to remove from memory
   405                              <1> ;Return: 	RAX will contain the new high memory address
   406                              <1> ;Example Usage:
   407                              <1> ;	push	QWORD 1024			;reduce memory by 1024 bytes
   408                              <1> ;	call	FreeBytes
   409                              <1> extern		FreeBytes
   410                              <1> 
   411                              <1> ;Print all of the floating point registers ST0 - ST7
   412                              <1> ;Stack Contents:
   413                              <1> ;	None
   414                              <1> ;Return: 	None
   415                              <1> ;Example Usage:
   416                              <1> ;	call	PrintFloatingRegisters
   417                              <1> extern		PrintFloatingRegisters
   418                              <1> 
   419                              <1> ;Print a 64-bit floating point number
   420                              <1> ;Stack Contents:
   421                              <1> ;	The floating point number
   422                              <1> ;Return: 	None
   423                              <1> ;Example Usage:
   424                              <1> ;	call	Print64bitFloatBinary
   425                              <1> extern		Print64bitFloatBinary
   426                              <1> 
   427                              <1> ;Set the carry flag if the floating poing number pushed onto the Stack
   428                              <1> ;is a +NAN, -NAN, +Infinity or -Infinity
   429                              <1> ;Stack Contents:
   430                              <1> ; QWORD Floating Point number (Stack)
   431                              <1> ;Return: Carry Flag Set if NAN, Clear if OK
   432                              <1> ;Example Usage
   433                              <1> ;   push  QWORD [floatingVariable]
   434                              <1> ;   call  IsNAN
   435                              <1> extern		IsNAN
   436                              <1> 
   437                              <1> ;Simple xor encryption/decryption of a string using a user entered key
   438                              <1> ;Arguments:	String address to encrypt/decrypt (Stack rbp + 48)
   439                              <1> ;			Length of the string to encrypt (Stack rbp + 40)
   440                              <1> ;			string address to be used as a key (Stack rbp + 32)
   441                              <1> ;			integer value indicating the length of the key (Stack rbp + 24)
   442                              <1> ;			string address where the encrypted/decrypted data should go (Stack rbp + 16)
   443                              <1> ;Return:	Total bytes encrypted in eax
   444                              <1> extern		EncryptString
   445                              <1> 
   446                              <1> ;Clears the keyboard buffer until \n or null are encountered
   447                              <1> ;Stack contents:
   448                              <1> ;	None
   449                              <1> ;Example Usage:
   450                              <1> ;	call	ClearKBuffer
   451                              <1> ;
   452                              <1> extern		ClearKBuffer
   453                              <1> 
   454                              <1> ;An Internal function used to get the system time in hours
   455                              <1> ;Stack Contents:
   456                              <1> ; None
   457                              <1> ;Return: RAX will have the current Hour
   458                              <1> ;Example Usage
   459                              <1> ;	call	GetCurrentHour
   460                              <1> extern		GetCurrentHour
   461                              <1> 
   462                              <1> ;An Internal function used to get the system time in minutes
   463                              <1> ;Stack Contents:
   464                              <1> ; None
   465                              <1> ;Return: RAX will have the current minute
   466                              <1> ;Example Usage
   467                              <1> ;	call	GetCurrentMinute
   468                              <1> extern		GetCurrentMinute
   469                              <1> 
   470                              <1> ;An Internal function used to get the system time in seconds
   471                              <1> ;Stack Contents:
   472                              <1> ; None
   473                              <1> ;Return: RAX will have the current seconds
   474                              <1> ;Example Usage
   475                              <1> ;	call	GetCurrentSecond
   476                              <1> extern		GetCurrentSecond
   477                              <1> 
   478                              <1> ;An Internal function used to get the system year
   479                              <1> ;Stack Contents:
   480                              <1> ; None
   481                              <1> ;Return: RAX will have the current year
   482                              <1> ;Example Usage
   483                              <1> ;	call	GetCurrentYear
   484                              <1> extern		GetCurrentYear
   485                              <1> 
   486                              <1> ;An Internal function used to get the system month
   487                              <1> ;Stack Contents:
   488                              <1> ; None
   489                              <1> ;Return: RAX will have the current month
   490                              <1> ;Example Usage
   491                              <1> ;	call	GetCurrentMonth
   492                              <1> extern		GetCurrentMonth
   493                              <1> 
   494                              <1> ;An Internal function used to get the system day
   495                              <1> ;Stack Contents:
   496                              <1> ; None
   497                              <1> ;Return: RAX will have the current day
   498                              <1> ;Example Usage
   499                              <1> ;	call	GetCurrentDay
   500                              <1> extern		GetCurrentDay
   501                              <1> 
   502                              <1> ;An Internal function used to get the system time hours, minutes, seconds
   503                              <1> ;Stack Contents:
   504                              <1> ; None
   505                              <1> ;Return: None
   506                              <1> ;Example Usage
   507                              <1> ;   call GetSystemTime
   508                              <1> extern		GetSystemTime
   509                              <1> 
   510                              <1> ;Print the time in the format hh:mm:ss
   511                              <1> ;Stack Contents:
   512                              <1> ; None
   513                              <1> ;Return: None
   514                              <1> ;Example Usage
   515                              <1> ;   call PrintSystemTime
   516                              <1> extern		PrintSystemTime
   517                              <1> 
   518                              <1> ;Print the date in the format mm/dd/yyyy
   519                              <1> ;Stack Contents:
   520                              <1> ; None
   521                              <1> ;Return: None
   522                              <1> ;Example Usage
   523                              <1> ;   call PrintSystemDateEng
   524                              <1> extern		PrintSystemDateEng
   525                              <1> 
   526                              <1> ;Print the date in the format yyyy/mm/dd
   527                              <1> ;Stack Contents:
   528                              <1> ; None
   529                              <1> ;Return: None
   530                              <1> ;Example Usage
   531                              <1> ;   call PrintSystemDateEuro
   532                              <1> extern		PrintSystemDateEuro
   533                              <1> 
   534                              <1> ;Convert and then return in a byte array a64-but number in decimal format
   535                              <1> ;Stack contents:
   536                              <1> ;	Value to Convert to an Ascii String
   537                              <1> ;	Address of byte array to contain the result
   538                              <1> ;Return Value:
   539                              <1> ;	rax = Number of characters returned
   540                              <1> ;Example Usage:
   541                              <1> ;	push 	QWORD [quadwordvariable]
   542                              <1> ;	push 	stringbuffer
   543                              <1> ;	call	ToString64bitNumDecimal
   544                              <1> ;
   545                              <1> extern		ToString64bitNumDecimal
   546                              <1> 
   547                              <1> ;Convert and then return in a byte array a 64bit signed number in decimal format
   548                              <1> ;Stack contents:
   549                              <1> ;	Value to Convert to an Ascii String
   550                              <1> ;	Address of byte array to contain the result
   551                              <1> ;Return Value:
   552                              <1> ;	rax = Number of characters returned
   553                              <1> ;Example Usage:
   554                              <1> ;	push 	QWORD [quadwordvariable]
   555                              <1> ;	push 	stringbuffer
   556                              <1> ;	call	ToString64bitSNumDecimal
   557                              <1> ;
   558                              <1> extern		ToString64bitSNumDecimal
   559                              <1> 
   560                              <1> ;Get the system date in English format and return to the calling function in th array
   561                              <1> ;	provided
   562                              <1> ;Stack contents:
   563                              <1> ;	Address of byte array to contain the result
   564                              <1> ;Return Value:
   565                              <1> ;	rax = Number of characters returned
   566                              <1> ;Example Usage:
   567                              <1> ;	push 	stringbuffer
   568                              <1> ;	call	GetEngDateString
   569                              <1> ;
   570                              <1> extern		GetEngDateString
   571                              <1> 
   572                              <1> ;Get the system date in European format and return to the calling function in th array
   573                              <1> ;	provided
   574                              <1> ;Stack contents:
   575                              <1> ;	Address of byte array to contain the result
   576                              <1> ;Return Value:
   577                              <1> ;	rax = Number of characters returned
   578                              <1> ;Example Usage:
   579                              <1> ;	push 	stringbuffer
   580                              <1> ;	call	GetEuroDateString
   581                              <1> ;
   582                              <1> extern		GetEuroDateString
   583                              <1> 
   584                              <1> ;Get the system time and return to the calling function in th array
   585                              <1> ;	provided
   586                              <1> ;Stack contents:
   587                              <1> ;	Address of byte array to contain the result
   588                              <1> ;Return Value:
   589                              <1> ;	rax = Number of characters returned
   590                              <1> ;Example Usage:
   591                              <1> ;	push 	stringbuffer
   592                              <1> ;	call	GetTimeString
   593                              <1> ;
   594                              <1> extern		GetTimeString
   595                              <1> 
   596                              <1> 
   597                              <1> ;Get a random number from the CPU
   598                              <1> ;Stack contents:
   599                              <1> ;	The maximum value of the random number
   600                              <1> ;	Signed = 1, Unsigned = 0
   601                              <1> ;Return Value:
   602                              <1> ;	rax = Random number value
   603                              <1> ;Example Usage:
   604                              <1> ;	push 	QWORD 200			;Will create a random number no greater than 200
   605                              <1> ;	push	QWORD 1				;1 = signed, 0 = uinsigned
   606                              <1> ;	call	GetRandomInt
   607                              <1> ;
   608                              <1> extern		GetRandomInt
   609                              <1> 
   610                              <1> ;Calculate the Variance from an array of numbers returning an integer result
   611                              <1> ;Stack contents:
   612                              <1> ;	Address of sample array of Quad words
   613                              <1> ;	The number of samples to process
   614                              <1> ;Return Value:
   615                              <1> ;	rax = Calculated Variance
   616                              <1> ;Example Usage:
   617                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   618                              <1> ;	push	10					;process 10 of the numbers in the array
   619                              <1> ;	call	CalcVariance
   620                              <1> ;
   621                              <1> extern		CalcVariance
   622                              <1> 
   623                              <1> 
   624                              <1> ;Calculate the Variance from an array of numbers returning a floating point number
   625                              <1> ;Stack contents:
   626                              <1> ;	Address of sample array of Quad words
   627                              <1> ;	The number of samples to process
   628                              <1> ;Return Value:
   629                              <1> ;	rax = Calculated Variance
   630                              <1> ;Example Usage:
   631                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   632                              <1> ;	push	10					;process 10 of the numbers in the array
   633                              <1> ;	call	CalcVariance
   634                              <1> ;
   635                              <1> extern		CalcVarianceFloat
   636                              <1> 
   637                              <1> ;Calculate the Standard Deviation from an array of numbers
   638                              <1> ;Stack contents:
   639                              <1> ;	Address of sample array of Quad words
   640                              <1> ;	The number of samples to process
   641                              <1> ;Return Value:
   642                              <1> ;	rax = Calculated Standard Deviation
   643                              <1> ;Example Usage:
   644                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   645                              <1> ;	push	10					;process 10 of the numbers in the array
   646                              <1> ;	call	CalcStdDev
   647                              <1> ;
   648                              <1> extern		CalcStdDev
   649                              <1> 
   650                              <1> ;Calculate the Mean from an array of numbers
   651                              <1> ;Stack contents:
   652                              <1> ;	Address of sample array of Quad words
   653                              <1> ;	The number of samples to process
   654                              <1> ;Return Value:
   655                              <1> ;	rax = Calculated Mean
   656                              <1> ;Example Usage:
   657                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   658                              <1> ;	push	10					;process 10 of the numbers in the array
   659                              <1> ;	call	CalcMean
   660                              <1> ;
   661                              <1> extern		CalcMean
   662                              <1> 
   663                              <1> ;Fills an array with random quad values
   664                              <1> ;Stack contents:
   665                              <1> ;	Address of array of Quad words
   666                              <1> ;	The number of samples to process
   667                              <1> ;	Maximum value of the random number(s)
   668                              <1> ;	Signed = 1, Unsigned = 0
   669                              <1> ;Return Value:
   670                              <1> ;	Nothing
   671                              <1> ;Example Usage:
   672                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   673                              <1> ;	push	10					;process 10 of the numbers in the array
   674                              <1> ;	push	500					;The maximum random value should be 500
   675                              <1> ;	push	0					;Unsigned only
   676                              <1> ;	call	RandomArray
   677                              <1> ;
   678                              <1> extern		RandomArray
   679                              <1> 
   680                              <1> ;Calculate the sum from an array of numbers
   681                              <1> ;Stack contents:
   682                              <1> ;	Address of sample array of Quad words
   683                              <1> ;	The number of samples to process
   684                              <1> ;Return Value:
   685                              <1> ;	rax = Calculated Sum
   686                              <1> ;Example Usage:
   687                              <1> ;	push 	sampleArray			;Address of the array of numeric samples
   688                              <1> ;	push	10					;process 10 of the numbers in the array
   689                              <1> ;	call	CalcSumArray
   690                              <1> ;
   691                              <1> extern		CalcSumArray
   692                              <1> 
   693                              <1> ;Calculate the GCD of two numbers passed to this function
   694                              <1> ;Stack contents:
   695                              <1> ;	Integer #1
   696                              <1> ;	Integer #2
   697                              <1> ;Return Value:
   698                              <1> ;	rax = Calculated Greatest Common Denominator
   699                              <1> ;Example Usage:
   700                              <1> ;	push 	15					;Our first number
   701                              <1> ;	push	5					;Our second number
   702                              <1> ;	call	CalcGCD
   703                              <1> ;
   704                              <1> extern		CalcGCD
   705                              <1> 
   706                              <1> ;Calculate the factorial of a number passed to this function
   707                              <1> ;Stack contents:
   708                              <1> ;	Integer number to factor
   709                              <1> ;Return Value:
   710                              <1> ;	rax = Calculated Factorial of the argument passed in
   711                              <1> ;Example Usage:
   712                              <1> ;	push 	15				;The number fo factor - 15 in this case
   713                              <1> ;	call	CalcFactorial
   714                              <1> ;
   715                              <1> extern		CalcFactorial
   716                              <1> 
   717                              <1> ;Calculate the factorial of a number passed to this function
   718                              <1> ;Stack contents:
   719                              <1> ;	Integer number to factor
   720                              <1> ;Return Value:
   721                              <1> ;	rax = Calculated Factorial of the argument passed in floating point format
   722                              <1> ;Example Usage:
   723                              <1> ;	push 	15				;The number fo factor - 15 in this case
   724                              <1> ;	call	CalcFactorialFloat
   725                              <1> ;
   726                              <1> extern		CalcFactorialFloat
   727                              <1> 
     7                                   
     8                                  SECTION .data
     9 00000000 57656C636F6D652074-     	welcomePrompt	db	"Welcome to my 64 bit Program", 00h
     9 00000009 6F206D792036342062-
     9 00000012 69742050726F677261-
     9 0000001B 6D00               
    10 0000001D 50726F6772616D2065-     	goodbyePrompt	db	"Program ending, have a great day!", 00h
    10 00000026 6E64696E672C206861-
    10 0000002F 766520612067726561-
    10 00000038 74206461792100     
    11                                  	
    12 0000003F 436F7079696E672073-     	processPrompt	db	"Copying source file to destination file...please wait", 0ah, 0dh
    12 00000048 6F757263652066696C-
    12 00000051 6520746F2064657374-
    12 0000005A 696E6174696F6E2066-
    12 00000063 696C652E2E2E706C65-
    12 0000006C 61736520776169740A-
    12 00000075 0D                 
    13 00000076 492077696C6C207265-     					db	"I will repeat if the input file is rather large.", 00h
    13 0000007F 706561742069662074-
    13 00000088 686520696E70757420-
    13 00000091 66696C652069732072-
    13 0000009A 6174686572206C6172-
    13 000000A3 67652E00           
    14 000000A7 506C6561736520656E-     	getKeyPrompt	db	"Please enter a key for encrypting: ", 0h
    14 000000B0 7465722061206B6579-
    14 000000B9 20666F7220656E6372-
    14 000000C2 797074696E673A2000 
    15                                  	
    16 000000CB 456E7465722074776F-     	invalidArgsPrompt	db	"Enter two existing .txt file names as arguments, ie (./main file1.txt file2.txt)", 0h
    16 000000D4 206578697374696E67-
    16 000000DD 202E7478742066696C-
    16 000000E6 65206E616D65732061-
    16 000000EF 7320617267756D656E-
    16 000000F8 74732C20696520282E-
    16 00000101 2F6D61696E2066696C-
    16 0000010A 65312E747874206669-
    16 00000113 6C65322E7478742900 
    17 0000011C 546865726520776173-     	inFilePrompt		db	"There was an error opening your input file", 0h
    17 00000125 20616E206572726F72-
    17 0000012E 206F70656E696E6720-
    17 00000137 796F757220696E7075-
    17 00000140 742066696C6500     
    18 00000147 546865726520776173-     	outFilePrompt		db	"There was an error opening your output file", 0h
    18 00000150 20616E206572726F72-
    18 00000159 206F70656E696E6720-
    18 00000162 796F7572206F757470-
    18 0000016B 75742066696C6500   
    19                                  	
    20 00000173 4E756D626572206F66-     	bytesEncryptedPrompt	db	"Number of bytes encrypted this loop: ", 0h
    20 0000017C 20627974657320656E-
    20 00000185 637279707465642074-
    20 0000018E 686973206C6F6F703A-
    20 00000197 2000               
    21 00000199 546F74616C20627974-     	totalBytesPrompt		db	"Total bytes encrypted to file: ", 0h
    21 000001A2 657320656E63727970-
    21 000001AB 74656420746F206669-
    21 000001B4 6C653A2000         
    22                                  	
    23                                  SECTION .bss
    24                                  	;Start Data for dynamic allocation
    25 00000000 <res 00000008>          	origMemory		resq	1				;What was the starting address of our dynamic memory
    26 00000008 <res 00000008>          	currMemory		resq	1				;Current end of our program memory address
    27 00000010 <res 00000008>          	encryptionData	resq    1				;Holds our address of encrypted data
    28                                  	;End Data for dynamic allocation
    29 00000018 <res 0000FFFF>          	buffer			resb	0ffffh
    30                                  		.len		equ		($-buffer)
    31                                  
    32 00010017 <res 00000008>          	numArgs		resq	1					;Hold the number of args from command line
    33 0001001F <res 00000008>          	pathFile	resq	1					;Hold the pathfile from command line
    34 00010027 <res 00000008>          	inputFile	resq	1					;Hold the inputfile from command line
    35 0001002F <res 00000008>          	outputFile	resq	1					;Hold the outputfile from command line
    36                                  	
    37 00010037 <res 00000008>          	outputFiled	resq	1					;OutputFile Descriptor variable
    38 0001003F <res 00000008>          	inputFiled	resq	1					;InputFile Descriptor variable
    39                                  	
    40                                  		
    41 00010047 <res 00000008>          	totalDataLength	resq 1					;Variable to hold bytes read this loop
    42 0001004F <res 00000008>          	totalBytesRead	resq 1					;Variable to hold the total number of bytes read
    43                                  		
    44 00010057 <res 000000FF>          	encryptionKey	resb 255				;Reserve memory for encryption key
    45                                  		.len		equ ($-encryptionKey)	;Current address - address of user input.
    46 00010156 <res 00000008>          	encryptKeyLength	resq 1				;We will store the length of the user input here
    47                                   
    48                                  SECTION     .text
    49                                  	global  _start
    50                                       
    51                                  _start:
    52 00000000 90                      	nop
    53                                  	
    54                                  ;-----------------------------------------------------------------------------------------------------------------------------------;
    55                                  ;		WELCOME PROMPT
    56                                  ;-----------------------------------------------------------------------------------------------------------------------------------;
    57                                  	
    58                                  	
    59 00000001 68[00000000]            	push	welcomePrompt
    60 00000006 E8(00000000)            	call	PrintString
    61 0000000B E8(00000000)            	call	Printendl
    62 00000010 E8(00000000)            	call	Printendl
    63                                  	
    64                                  	
    65                                  ;-----------------------------------------------------------------------------------------------------------------------------------;
    66                                  ;		READ COMMAND LINE ARGUMENTS INTO VARIABLES
    67                                  ;-----------------------------------------------------------------------------------------------------------------------------------;
    68                                  	
    69                                  	
    70                                  	;Get numArgs ([numArgs] CONTAINS THE VALUE 3)
    71 00000015 58                      	pop		rax
    72 00000016 48890425[17000100]      	mov		[numArgs], rax
    73                                  	
    74 0000001E 48833C25[17000100]-     	cmp		QWORD [numArgs], 3
    74 00000026 03                 
    75 00000027 0F85E1010000            	jne		invalidArgs
    76                                  	
    77                                  	
    78                                  	;Get path address ([pathFile] contains the address to the string, pathfile contains a pointer to a pointer)
    79 0000002D 58                      	pop		rax
    80 0000002E 48890425[1F000100]      	mov		[pathFile], rax
    81                                  	
    82                                  	;Get input file address ([inputFile] contains the address to the string, inputFile contains a pointer to a pointer)
    83 00000036 58                      	pop		rax
    84 00000037 48890425[27000100]      	mov		[inputFile], rax
    85                                  	
    86                                  	;Get output file address ([outputFile] contains the address to the string, outputFile contains a pointer to a pointer)
    87 0000003F 58                      	pop		rax
    88 00000040 48890425[2F000100]      	mov		[outputFile], rax
    89                                  	
    90                                  	
    91                                  ;-----------------------------------------------------------------------------------------------------------------------------------;
    92                                  ;		INPUT FILE PROCESSING
    93                                  ;-----------------------------------------------------------------------------------------------------------------------------------;
    94                                  	
    95                                  	
    96                                  	;Open the input file for reading ---CORRECT
    97 00000048 B802000000              	mov		rax, 2
    98 0000004D 488B3C25[27000100]      	mov		rdi, [inputFile]
    99 00000055 BE00000000              	mov		rsi, 0h
   100 0000005A BA00000000              	mov		rdx, 0h
   101 0000005F 0F05                    	syscall
   102 00000061 4883F800                	cmp		rax, 0h				;If it did not open, quit
   103 00000065 0F8CB9010000                jl		inFileError
   104                                  	;rax will contain the file descriptor
   105 0000006B 48890425[3F000100]      	mov		[inputFiled], rax
   106                                  	
   107                                  	
   108                                  ;-----------------------------------------------------------------------------------------------------------------------------------;
   109                                  ;		OUTPUT FILE PROCESSING
   110                                  ;-----------------------------------------------------------------------------------------------------------------------------------;	
   111                                  	
   112                                  	
   113                                  	;Open the output file	--- CORRECT BUT NEED TO CHECK IT ACTS WEIRD WHEN PRINTING NEW LINES
   114 00000073 B802000000              	mov		rax, 2				;THIS IS THE COMMAND TO OPEN AN EXISTING FILE.  THIS IS MY CHOICE INSTEAD OF CREATING A BRAND NEW FILE.  THIS HELPS VALIDATE FILE INPUT
   115 00000078 488B3C25[2F000100]      	mov		rdi, [outputFile]
   116 00000080 BE01000000              	mov		rsi, 1				;1 IS FOR WRITE ONLY
   117 00000085 BAFF010000              	mov		rdx, 777o
   118 0000008A 0F05                    	syscall
   119 0000008C 4883F800                	cmp		rax, 0h				;If eax < 0, file error
   120 00000090 0F8EA4010000                jle		outFileError
   121                                  	;rax will contain the file descriptor
   122 00000096 48890425[37000100]      	mov		[outputFiled], rax
   123                                  	
   124                                  	
   125                                  ;-----------------------------------------------------------------------------------------------------------------------------------;
   126                                  ;		GET ENCRYPTION KEY FROM USER
   127                                  ;-----------------------------------------------------------------------------------------------------------------------------------;	
   128                                  	
   129                                  	
   130 0000009E B9FF000000              	mov		rcx, encryptionKey.len					;Move full size of encryptionKey to rcx
   131 000000A3 BE00000000              	mov 	rsi, 0									;Zero out rsi
   132                                  	
   133                                  	Loop3:
   134 000000A8 C686[57000100]00        		mov BYTE [encryptionKey + rsi], ''			;Clear out any previous data in encryptionKey
   135 000000AF 48FFC6                  		inc rsi										;
   136 000000B2 E2F4                    	loop Loop3
   137                                  
   138 000000B4 68[A7000000]            	push 	getKeyPrompt							;Display getKeyPrompt and get user input
   139 000000B9 E8(00000000)            	call 	PrintString								;
   140 000000BE 68[57000100]            	push 	encryptionKey							;
   141 000000C3 68FF000000              	push 	encryptionKey.len						;
   142 000000C8 E8(00000000)            	call 	ReadText								;
   143 000000CD 48FFC8                  	dec 	rax										;Decrement rax to avoid using null terminator in the key
   144 000000D0 48890425[56010100]      	mov 	[encryptKeyLength], rax					;Move size of input user entered to encryptionKey length
   145                                  	
   146                                  	
   147                                  ;-----------------------------------------------------------------------------------------------------------------------------------;
   148                                  ;		DYNAMIC MEMORY ALLOCATION 100% WORKING!!!!!!!
   149                                  ;-----------------------------------------------------------------------------------------------------------------------------------;
   150                                  
   151                                  
   152                                  	;Begin allocating memory (Get the starting address of our new heap)
   153 000000D8 BF00000000              	mov		rdi, 0h
   154 000000DD B80C000000              	mov		rax, 0ch
   155 000000E2 0F05                    	syscall
   156                                  	;rax will contain the starting memory address
   157 000000E4 48890425[00000000]      	mov		[origMemory], rax			;The start of our dynamic memory
   158 000000EC 48890425[08000000]      	mov		[currMemory], rax			;Current memory location
   159 000000F4 48890425[10000000]      	mov		[encryptionData], rax		;Start of our encryptionData
   160                                  	
   161                                  	;Add 0ffffh bytes to our heap
   162 000000FC 4805FFFF0000            	add		rax, 0ffffh
   163 00000102 4889C7                  	mov		rdi, rax
   164 00000105 B80C000000              	mov		rax, 0ch
   165 0000010A 0F05                    	syscall
   166                                  	;rax will contain the new heap end
   167 0000010C 48890425[08000000]      	mov		[currMemory], rax
   168                                  
   169                                  
   170                                  	;Fill our dynamic memory with the data
   171 00000114 48C70425[47000100]-     	mov	QWORD[totalDataLength], 0ffh
   171 0000011C FF000000           
   172 00000120 488B0C25[47000100]      	mov	rcx, [totalDataLength]
   173 00000128 BE00000000              	mov	rsi, 0
   174                                  	
   175                                  	continueLoop:
   176                                  		
   177                                  		;Read the input file into a variable
   178 0000012D B800000000              		mov		rax, 0
   179 00000132 488B3C25[3F000100]      		mov		rdi, [inputFiled]
   180 0000013A 488B3425[10000000]      		mov		rsi, [encryptionData]			;We use this notation because encryptionData holds a literal address value
   181 00000142 BAFFFF0000              		mov		rdx, buffer.len					;The buffer.len is 0ffffh bytes long
   182 00000147 0F05                    		syscall
   183                                  		;rax will contain the number of bytes read
   184 00000149 48890425[47000100]      		mov		[totalDataLength], rax
   185 00000151 48010425[4F000100]      		add		[totalBytesRead], rax
   186                                  		
   187 00000159 FF3425[10000000]        	    push	QWORD[encryptionData]			;Push argument1 (address of data we are encrypting)
   188 00000160 FF3425[47000100]        		push	QWORD[totalDataLength]			;Push argument2	(address of number of bytes we are encrypting this loop)
   189 00000167 68[57000100]            		push	encryptionKey					;Push argument3	(address of the encryption key input)
   190 0000016C FF3425[56010100]        		push	QWORD[encryptKeyLength]			;Push argument4	(address of the length of the encryption key)
   191 00000173 E8FE000000              		call	EncryptMe						;Call EncryptMe function
   192                                  		
   193 00000178 68[73010000]            		push	bytesEncryptedPrompt			;Display bytes encrypted this loop
   194 0000017D E8(00000000)            		call	PrintString
   195 00000182 FF3425[47000100]        		push	QWORD[totalDataLength]
   196 00000189 E8(00000000)            		call	Print64bitNumDecimal
   197 0000018E E8(00000000)            		call	Printendl
   198                                  
   199                                  		;Output to the file  ---DONE
   200 00000193 488B3C25[37000100]      		mov		rdi, [outputFiled]
   201 0000019B B801000000              		mov		rax, 01h
   202 000001A0 488B3425[10000000]      		mov		rsi, [encryptionData]
   203 000001A8 488B1425[47000100]      		mov		rdx, QWORD[totalDataLength]
   204 000001B0 0F05                    		syscall
   205                                  		
   206 000001B2 48813C25[47000100]-     		cmp		QWORD[totalDataLength], 0ffffh			;If the data length that was read is equal to 0ffffh, we have more data to read, so loop back
   206 000001BA FFFF0000           
   207 000001BE 0F8469FFFFFF            		je		continueLoop
   208                                  	
   209                                  	
   210                                  	
   211                                  ;-----------------------------------------------------------------------------------------------------------------------------------;
   212                                  ;		CLOSE OUR FILES
   213                                  ;-----------------------------------------------------------------------------------------------------------------------------------;
   214                                  	
   215                                  	
   216                                  	;Close the input file
   217 000001C4 B803000000              	mov		rax, 03h
   218 000001C9 488B3C25[3F000100]      	mov		rdi, [inputFiled]
   219 000001D1 0F05                    	syscall
   220                                  
   221                                  	;Close the output file
   222 000001D3 B803000000              	mov		rax, 03h
   223 000001D8 488B3C25[37000100]      	mov		rdi, [outputFiled]
   224 000001E0 0F05                    	syscall
   225                                  	
   226                                  	
   227                                  	;Now display the total number of bytes read to the outputFile
   228 000001E2 E8(00000000)            	call	Printendl
   229 000001E7 68[99010000]            	push	totalBytesPrompt
   230 000001EC E8(00000000)            	call	PrintString
   231 000001F1 FF3425[4F000100]        	push	QWORD[totalBytesRead]
   232 000001F8 E8(00000000)            	call	Print64bitNumDecimal
   233                                  	
   234                                  ;-----------------------------------------------------------------------------------------------------------------------------------;
   235                                  ;		DEALLOCATE DYNAMIC MEMORY
   236                                  ;-----------------------------------------------------------------------------------------------------------------------------------;
   237                                  
   238                                  
   239 000001FD B80C000000              	mov		rax, 0ch
   240 00000202 488B3C25[00000000]      	mov		rdi, [origMemory]
   241 0000020A 0F05                    	syscall
   242                                  	
   243 0000020C EB42                    	jmp		endProgram
   244                                  
   245                                  ;-----------------------------------------------------------------------------------------------------------------------------------;
   246                                  ;		ERROR PROMPTS
   247                                  ;-----------------------------------------------------------------------------------------------------------------------------------;
   248                                  
   249                                  	;Wrong number of command line args label
   250                                  	invalidArgs:
   251 0000020E E8(00000000)            		call Printendl
   252 00000213 68[CB000000]            		push invalidArgsPrompt
   253 00000218 E8(00000000)            		call PrintString
   254 0000021D E8(00000000)            		call Printendl
   255 00000222 EB2C                    		jmp endProgram
   256                                  	
   257                                  	;Error opening input file label
   258                                  	inFileError:				;Print error if input file did not open successfully
   259 00000224 E8(00000000)            		call Printendl			;
   260 00000229 68[1C010000]            		push inFilePrompt		;
   261 0000022E E8(00000000)            		call PrintString		;
   262 00000233 E8(00000000)            		call Printendl			;
   263 00000238 EB16                    		jmp	endProgram			;
   264                                  		
   265                                  	;Error opening output file label
   266                                  	outFileError:				;Print error if output file did not open successfully
   267 0000023A E8(00000000)            		call Printendl			;
   268 0000023F 68[47010000]            		push outFilePrompt		;
   269 00000244 E8(00000000)            		call PrintString		;
   270 00000249 E8(00000000)            		call Printendl			;
   271 0000024E EB00                    		jmp endProgram			;
   272                                  
   273                                  
   274                                  ;-----------------------------------------------------------------------------------------------------------------------------------;
   275                                  ;		GOODBYE PROMPT
   276                                  ;-----------------------------------------------------------------------------------------------------------------------------------;
   277                                  
   278                                  
   279                                  	endProgram:
   280 00000250 E8(00000000)            	call	Printendl
   281 00000255 E8(00000000)            	call	Printendl
   282 0000025A 68[1D000000]            	push	goodbyePrompt
   283 0000025F E8(00000000)            	call	PrintString
   284 00000264 E8(00000000)            	call	Printendl
   285                                  	
   286 00000269 90                      	nop
   287                                  ;
   288                                  ;Setup the registers for exit and poke the kernel
   289                                  ;Exit: 
   290                                  Exit:
   291 0000026A B83C000000              	mov		rax, 60					;60 = system exit
   292 0000026F BF00000000              	mov		rdi, 0					;0 = return code
   293 00000274 0F05                    	syscall							;Poke the kernel
   294                                  
   295                                  
   296                                  ;-----------------------------------------------------------------------------------------------------------------------------------;
   297                                  ;		ENCRYPT ME PROCEDURE
   298                                  ;-----------------------------------------------------------------------------------------------------------------------------------;
   299                                  
   300                                  
   301                                  EncryptMe:
   302 00000276 55                      	push	rbp								;Constructing our Stack Frame
   303 00000277 4889E5                  	mov		rbp, rsp						;
   304                                  	
   305 0000027A E8(00000000)            	call	Printendl
   306 0000027F 68[3F000000]            	push	processPrompt					;Display processing message
   307 00000284 E8(00000000)            	call	PrintString						;
   308 00000289 E8(00000000)            	call	Printendl
   309                                  	
   310 0000028E B800000000              	mov		rax, 0h
   311                                  	;Get our arguments into proper registers
   312 00000293 488B5518                	mov		rdx, [rbp + 24]					;(ENCRYPTION KEY) Move the starting address of the encryption key into rdx
   313 00000297 4C8B4528                	mov		r8,  [rbp + 40]					;(ENCRYPTEDDATA) Move the starting address of our data into r8
   314                                  	
   315 0000029B 488B4D20                	mov		rcx, [rbp + 32]					;(LENGTH OF DATA)Move number of bytes we are encrypting into rcx
   316 0000029F BE00000000              	mov 	rsi, 0							;Zero out rsi
   317                                  	
   318 000002A4 488B5D10                	mov		rbx, [rbp + 16]					;(LENGTH OF ENCRYPT KEY)Move the length of the encryption key into rbx
   319 000002A8 BF00000000              	mov 	rdi, 0							;Zero out rdi
   320                                  	
   321 000002AD 4883FB00                	cmp		rbx, 0							;This compare handles if the user enters a blank key
   322 000002B1 741B                    	je		goBack							;
   323                                  	
   324                                  	Loop4:
   325 000002B3 8A043A                  		mov	al, [rdx + rdi]					;Move the encryptionKey char into al ---Keep
   326 000002B6 41300430                		xor BYTE[r8 + rsi], al				;xor the first byte in encryptedData with the encryptionKey	---Keep
   327 000002BA 48FFC6                  		inc rsi								;increment the encrypted string's index
   328 000002BD 48FFC7                  		inc rdi								;increment the key's index
   329 000002C0 4839FB                  		cmp rbx, rdi						;compare the size of the key with the current index we're at in the string
   330 000002C3 7402                    		je restartKey						;if we're at the end of the key, jump to restartKey:
   331 000002C5 EB05                    		jmp nextChar						;if we're not at the end of the key, jump to the next character
   332                                  		restartKey:
   333 000002C7 BF00000000              			mov rdi, 0						;reset the index of the key, looping back around to the first char
   334                                  		nextChar:
   335 000002CC E2E5                    	loop Loop4
   336                                  	
   337                                  	goBack:									;This handles if the user enters a blank key
   338                                  	
   339 000002CE 4889EC                  	mov		rsp, rbp						;Deconstruct our Stack Frame
   340 000002D1 5D                      	pop		rbp								;
   341 000002D2 C22000                  ret	32										;Release the 4 variables from the stack
   342                                  
